/**
 * 
 */
package mapsHashSkip;



/**
 * Interface for a set data structure
 * @author Lau Sandt
 * https://github.com/lausandt/HashTablesMapsSkipLists
 */
public interface Set<E> {
	
	/** Adds an element e to S (if not already present), throws an exception if already present */
	void add(E element); 
	
	/** removes the element e from S (throws an exception if not present) */
	void remove(E element); 

	/** Returns whether e is an element of S */
	boolean contains(E element);  

	/** Returns an iterator of all elements of S */
	Iterable<E> elements(); 

	/** updates S to include all elements of set T (union) */
	void addAll(Set<E> t);

	/**  Updates S so that it only keeps those elements that are also elements of set T (intersection) */
	void retainAll(Set<E> T); 

	/** Updates S by removing all elements that also occur in T (subtraction) */
	void removeAll(Set<E> T); 

}

